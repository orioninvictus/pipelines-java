trigger:
  - master

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept' = 'application/json'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }

      $body = @{
          "AgentMode" = "Cloud"
          "RootUrl" = "http://example4.com"
          "LicenseType" = "Subscription"
          "Name" = "Blue Fizzz 3333"
          "Description" = "Sample Description"
          "Tags" = @("TagWithNoValue", "TagWithValue:Value")
      }

      $jsonBody = $body | ConvertTo-Json

      $url = 'https://www.netsparkercloud.com/api/1.0/websites/new'

      try {
          $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $jsonBody -ErrorAction Stop

          # Display the response
          Write-Output $response
      } catch {
          $errorDetails = $_.ErrorDetails.Message
          if ($errorDetails -match 'A Website with the same name already exists in your account' -or
              $errorDetails -match 'The URL you entered is already in use') {
              # Handle the case where the website name or RootUrl already exists
              Write-Host "Website with the same name or URL already exists. Continuing with the next task."
          } else {
              # Re-throw the exception for other errors
              throw
          }
      }

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Sleep for 1 minute
      Start-Sleep -Seconds 10
      $uri = 'https://www.netsparkercloud.com/api/1.0/scanprofiles/new'
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept' = 'application/json'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }
      
      $body = @{
          CreateType = 'Website'
          IsPrimary = $true
          IsShared = $true
          IsTimeWindowEnabled = $false
          ProfileName = 'edenred_example_4'
          TargetUri = 'http://example4.com/'
          # Example BasicAuthenticationApiModel = @{
              #Credentials = @(
               #   @{
               #(Choose one)      AuthenticationType = 'Basic, NTLM, Kerberos, Digest, Negotiate'
               #  Domain = 'example.com'
               #       Password = 'pass'
               #       UriPrefix = 'http://example.com/'
               #       UserName = 'user'
               #       IsReplacedCredentials = $false
               #   }
               #)
               #IsEnabled = $true
               #NoChallenge = $false
          BasicAuthenticationApiModel = @{
              Credentials = @(
                  @{
                      AuthenticationType = ''
                      Domain = ''
                      Password = ''
                      UriPrefix = ''
                      UserName = ''
                      IsReplacedCredentials = $false
                  }
              )
              IsEnabled = $false
              NoChallenge = $false
          }
          #Cookies = 'name1=value1; name2=value2'
          Cookies = ''
          CrawlAndAttack = $true
          EnableHeuristicChecksInCustomUrlRewrite = $true
          ExcludedLinks = @(
              @{
                  RegexPattern = '(log|sign)\-?(out|off)'
              }
          )
          ExcludedUsageTrackers = @(
              @{
                  Url = 'UA-XXXXX-Y'
              }
          )
          DisallowedHttpMethods = @(PUT; PATCH; DELETE)
          ExcludeLinks = $true
          ExcludeAuthenticationPages = $true
          FindAndFollowNewLinks = $true
          FormAuthenticationSettingModel = @{
              Integrations = @{}
              CustomScripts = @()
              InteractiveLoginRequired = $false
              DefaultPersonaValidation = $false
              DetectBearerToken = $true
              DisableLogoutDetection = $false
              IsEnabled = $false
              IsNotVerified = $false
              LoginFormUrl = 'http://example.com/login.php'
              LoginRequiredUrl = 'http://example.com/admin.php'
              LogoutKeywordPatterns = @(
                  @{
                      Pattern = 'Signin required'
                      Regex = $true
                  }
              )
              LogoutKeywordPatternsValue = '[{"Pattern":"Signin required","Regex":true}]'
              LogoutRedirectPattern = 'http://example.com/Default.php?ref=*'
              OverrideTargetUrl = $false
              Personas = @(
                  @{
                      IsActive = $true
                      Password = 'passadas'
                      UserName = 'userwrere'
                      OtpType = 'Totp'
                      SecretKey = ''
                      Digit = 6
                      Period = 30
                      Algorithm = 'Sha1'
                      FormAuthType = 'Manual'
                      IntegrationId = '00000000-0000-0000-0000-000000000000'
                      Version = 'V2'
                      UseStaticUsername = $false
                      CyberArkUseStaticUsername = $false
                      AzureUseStaticUsername = $false
                      IsReplacedCredentials = $false
                      Index = 0
                  }
              )
          }
          AuthenticationProfileOption = 'DontUse'
          ImportedLinks = @('/foo1', '/foo2')
          IsMaxScanDurationEnabled = $false
          MaxDynamicSignatures = 60
          MaxScanDuration = 48
          Scope = 'EnteredPathAndBelow'
          SubPathMaxDynamicSignatures = 30
      } | ConvertTo-Json
      
      Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $uri = 'https://www.netsparkercloud.com/api/1.0/scans/newwithprofile'
            $headers = @{
                'Content-Type' = 'application/json'
                'Accept' = 'application/json'
                'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
            }
            
            $body = @{
                ProfileName = "edenred_example_3"
                TargetUri = "http://example8.com/"
            } | ConvertTo-Json
            
            $jsonResponse = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body -ErrorAction Stop
            Start-Sleep -Seconds 10
            
            # Output the content of the response
            Write-Host "Response Content: $jsonResponse"
            
            # Convert JSON response to PowerShell object
            $responseObject = $jsonResponse 
                  
            # Extract the 'Id' parameter value
            $idValue = $responseObject.Id
                  
            # Set the environment variable for Azure DevOps
            Write-Host "##vso[task.setvariable variable=my.ver]$idValue"
            # Your PowerShell script here to read the environment variable
            $ver = '$(my.ver)'
            Write-Host "ID from variable: $ver"
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Define the URL and headers for cancellation
      $url = 'https://www.netsparkercloud.com/api/1.0/scans/cancel'
      $headers = @{
          'Content-Type'   = 'application/json'
          'Accept'         = 'application/json'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }
      
      # Get the 'Id' value from the environment variable
      $idValue = $env:MY_VER
      
      # Debug: Output the request data
      Write-Host "Sending request to $url with data: `"$idValue`""
      
      # Send the HTTP request
      try {
          $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body "`"$idValue`"" -ErrorAction Stop
      
          # Debug: Output the response
          Write-Host "Response Content: $response"
      } catch {
          Write-Host "Error: $_"
          throw
      }
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Get the 'my.ver' value from the environment variable
      $ver = '$(my.ver)'
      
      # Define the URL and headers for the new request
      $url = "https://www.netsparkercloud.com/api/1.0/scans/detail/$ver"
      $headers = @{
          'Accept'        = 'application/json'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }
      
      # Send the HTTP GET request
      try {
          $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
      
          # Extract the values from the response
          $websiteId = $response.WebsiteId
          $scanTaskProfileId = $response.ScanTaskProfile.Id
          $scanTaskGroupId = $response.ScanTaskGroupId
      
          # Set the environment variables for Azure DevOps
          Write-Host "##vso[task.setvariable variable=my.websiteId]$websiteId"
          Write-Host "##vso[task.setvariable variable=my.scanTaskProfileId]$scanTaskProfileId"
          Write-Host "##vso[task.setvariable variable=my.scanTaskGroupId]$scanTaskGroupId"
      
          # Output the extracted values
          Write-Host "WebsiteId: $websiteId"
          Write-Host "ScanTaskProfileId: $scanTaskProfileId"
          Write-Host "ScanTaskGroupId: $scanTaskGroupId"
      } catch {
          Write-Host "Error: $_"
      }
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Start-Sleep -Seconds 10
      # Get the 'ScanTaskGroupId' value from the environment variable
      $scanTaskGroupId = '$(my.scanTaskGroupId)'
      
      # Define the URL and headers for the new request
      $url = "https://www.netsparkercloud.com/api/1.0/notifications/new"
      $headers = @{
          'Content-Type'  = 'application/json'
          'Accept'        = 'application/json'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }
      
      # Create the JSON body with the dynamic 'ScanTaskGroupId' value
      $body = @{
          Recipients = @{
              Integrations            = @("Azure Boards Test Orion2")
              SpecificEmailRecipients = @("WebsiteTechnicalContact", "PersonWhoStartedScan")
              SpecificSmsRecipients   = @("PersonWhoStartedScan")
          }
          WebsiteRootUrl = "http://example8.com/"
          EmailSmsFilter = @{
              IsConfirmed = $false
              Severity    = "Critical"
              State       = "NotFound"
              Certainty   = 0
          }
          IntegrationFilter = @{
              IsConfirmed = $false
              Severity    = "Low"
              State       = "NotFound"
              Certainty   = 0
          }
          Disabled         = $false
          ScanTaskGroupId  = $scanTaskGroupId  # Use the dynamic value obtained earlier
          Event            = "ScanCompleted"
          Name             = "Team 2 Edenred"
          Scope            = "Website"
      } | ConvertTo-Json
      
      # Send the HTTP POST request
      try {
          $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
      
          # Output the response
          Write-Host "Response Content: $response"
      } catch {
          Write-Host "Error: $_"
      }
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Start-Sleep -Seconds 10
      # Define the URL and headers for the new request
      $url = 'https://www.netsparkercloud.com/api/1.0/scans/CreateFromPluginScanRequest'
      $headers = @{
          'Content-Type'  = 'application/json; charset=UTF-8'
          'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
      }
      
      # Get variables for the request body
      $websiteIdVariable = '$(my.websiteId)'  # Replace with your actual variable name
      $profileIdVariable = '$(my.scanTaskProfileId)'  # Replace with your actual variable name
      
      # Construct the request body
      $requestBody = @{
          WebsiteId = $websiteIdVariable
          ProfileId = $profileIdVariable
          ScanType  = 'FullWithSelectedProfile'
          VcsCommitInfoModel = @{
              CiBuildConfigurationName = $env:SYSTEM_TEAMPROJECT
              CiBuildHasChange        = $env:BUILD_SOURCEVERSION
              CiBuildId               = $env:BUILD_BUILDID
              CiBuildUrl              = $env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI
              Committer               = $env:BUILD_REQUESTEDFOR
              IntegrationSystem       = 'AzureDevOps'
              VcsName                 = $env:BUILD_REPOSITORY_PROVIDER
              VcsVersion              = $env:BUILD_SOURCEVERSION
          }
      } | ConvertTo-Json
      
      # Send the HTTP POST request
      try {
          $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $requestBody
      
          # Output the response
          Write-Host "Response Content: $response"
      } catch {
          Write-Host "Error: $_"
      }
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Define the URL and headers for cancellation
            $url = 'https://www.netsparkercloud.com/api/1.0/scans/delete'
            $headers = @{
                'Content-Type'   = 'application/json'
                'Accept'         = 'application/json'
                'Authorization' = "Basic $([System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($env:USERID +':'+$env:APITOKEN)))"
            }
            
            # Get the 'Id' value from the environment variable
            $idValue = $env:MY_VER
            
            # Debug: Output the request data
            Write-Host "Sending request to $url with data: `"$idValue`""
            
            # Send the HTTP request
            try {
                $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body "[`"$idValue`"]" -ErrorAction Stop
            
                # Debug: Output the response
                Write-Host "Response Content: $response"
            } catch {
                Write-Host "Error: $_"
                throw
            }