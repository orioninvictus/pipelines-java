trigger:
  - master

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept' = 'application/json'
          'Authorization' = 'Basic YmRiM2U2ZTQyZThkNGNkNTNmZjhhZTU4MDFmZWMyMDg6ZklUKzZIS01PM29pbzBRYklVWWJpM0dMcTNEVEhQdjQvRnJUWnQ0Mzh6WT0='
      }
      
      $body = @{
          "AgentMode" = "Cloud"
          "RootUrl" = "http://example8.com"
          "LicenseType" = "Subscription"
          "Name" = "Blue Fizzz 22222"
          "Description" = "Sample Description"
          "Tags" = @("TagWithNoValue", "TagWithValue:Value")
      }
      
      $jsonBody = $body | ConvertTo-Json
      
      $url = 'https://www.netsparkercloud.com/api/1.0/websites/new'
      
      $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $jsonBody
      
      # Display the response
      Write-Output $response
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Sleep for 1 minute
      Start-Sleep -Seconds 10
      $uri = 'https://www.netsparkercloud.com/api/1.0/scanprofiles/new'
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept' = 'application/json'
          'Authorization' = 'Basic YmRiM2U2ZTQyZThkNGNkNTNmZjhhZTU4MDFmZWMyMDg6ZklUKzZIS01PM29pbzBRYklVWWJpM0dMcTNEVEhQdjQvRnJUWnQ0Mzh6WT0='
      }
      
      $body = @{
          CreateType = 'Website'
          IsPrimary = $true
          IsShared = $true
          IsTimeWindowEnabled = $false
          ProfileName = 'edenred_example_3'
          TargetUri = 'http://example8.com/'
          BasicAuthenticationApiModel = @{
              Credentials = @(
                  @{
                      AuthenticationType = 'Basic'
                      Domain = 'example.com'
                      Password = 'pass'
                      UriPrefix = 'http://example.com/'
                      UserName = 'user'
                      IsReplacedCredentials = $false
                  }
              )
              IsEnabled = $true
              NoChallenge = $false
          }
          Cookies = 'name1=value1; name2=value2'
          CrawlAndAttack = $true
          EnableHeuristicChecksInCustomUrlRewrite = $true
          ExcludedLinks = @(
              @{
                  RegexPattern = '(log|sign)\-?(out|off)'
              }
          )
          ExcludedUsageTrackers = @(
              @{
                  Url = 'UA-XXXXX-Y'
              }
          )
          DisallowedHttpMethods = @()
          ExcludeLinks = $true
          ExcludeAuthenticationPages = $true
          FindAndFollowNewLinks = $true
          FormAuthenticationSettingModel = @{
              Integrations = @{}
              CustomScripts = @()
              InteractiveLoginRequired = $false
              DefaultPersonaValidation = $false
              DetectBearerToken = $true
              DisableLogoutDetection = $false
              IsEnabled = $false
              IsNotVerified = $false
              LoginFormUrl = 'http://example.com/login.php'
              LoginRequiredUrl = 'http://example.com/admin.php'
              LogoutKeywordPatterns = @(
                  @{
                      Pattern = 'Signin required'
                      Regex = $true
                  }
              )
              LogoutKeywordPatternsValue = '[{"Pattern":"Signin required","Regex":true}]'
              LogoutRedirectPattern = 'http://example.com/Default.php?ref=*'
              OverrideTargetUrl = $false
              Personas = @(
                  @{
                      IsActive = $true
                      Password = 'passadas'
                      UserName = 'userwrere'
                      OtpType = 'Totp'
                      SecretKey = ''
                      Digit = 6
                      Period = 30
                      Algorithm = 'Sha1'
                      FormAuthType = 'Manual'
                      IntegrationId = '00000000-0000-0000-0000-000000000000'
                      Version = 'V2'
                      UseStaticUsername = $false
                      CyberArkUseStaticUsername = $false
                      AzureUseStaticUsername = $false
                      IsReplacedCredentials = $false
                      Index = 0
                  }
              )
          }
          AuthenticationProfileOption = 'DontUse'
          ImportedLinks = @('/foo1', '/foo2')
          IsMaxScanDurationEnabled = $false
          MaxDynamicSignatures = 60
          MaxScanDuration = 48
          Scope = 'EnteredPathAndBelow'
          SubPathMaxDynamicSignatures = 30
      } | ConvertTo-Json
      
      Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $uri = 'https://www.netsparkercloud.com/api/1.0/scans/newwithprofile'
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept' = 'application/json'
          'Authorization' = 'Basic YmRiM2U2ZTQyZThkNGNkNTNmZjhhZTU4MDFmZWMyMDg6ZklUKzZIS01PM29pbzBRYklVWWJpM0dMcTNEVEhQdjQvRnJUWnQ0Mzh6WT0='
      }
      
      $body = @{
          ProfileName = "edenred_example_3"
          TargetUri = "http://example8.com/"
      } | ConvertTo-Json
      
      $response = Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body
      # Display the response
      $response
      Start-Sleep -Seconds 10
      # Convert JSON response to PowerShell object
      $responseObject = $response | ConvertFrom-Json
            
      # Extract the 'Id' parameter value
      $idValue = $responseObject.Id
            
      # Set the environment variable for Azure DevOps
      Write-Host "##vso[task.setvariable variable=my.ver]$idValue"
      # Your PowerShell script here to read the environment variable
      $ver = '$(my.ver)'
      Write-Host "ID from variable: $ver"
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Start-Sleep -Seconds 20
      Write-Host "The value of 'ver' is: $(my.ver)"
      # Define the URL and headers
      $url = 'https://www.netsparkercloud.com/api/1.0/scans/cancel'
      $headers = @{
          'Content-Type' = 'application/json'
          'Accept'       = 'application/json'
          'Authorization' = 'Basic YmRiM2U2ZTQyZThkNGNkNTNmZjhhZTU4MDFmZWMyMDg6ZklUKzZIS01PM29pbzBRYklVWWJpM0dMcTNEVEhQdjQvRnJUWnQ0Mzh6WT0='
      }
      
      # Define the data to be sent in the request body
      $data = @{
          Id = "$ver"
      } | ConvertTo-Json
      
      # Send the HTTP request
      $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $data
      
      # Display the response
      $response
- task: netsparker-cloud@1
  inputs:
    apiConnection: 'azuredevopstest'
    scanTypes: '2'
    scanWebSites: '7ce8c8ea-cbcc-46bd-2e18-b01a0266716d'
    scanWebSitesProfile: 'eae4fab5-2910-4567-2772-b01a02708950'